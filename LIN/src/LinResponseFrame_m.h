//
// Generated file, do not edit! Created by nedtool 4.6 from LinResponseFrame.msg.
//

#ifndef _LINRESPONSEFRAME_M_H_
#define _LINRESPONSEFRAME_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "LinRequestFrame_m.h"
// }}

/**
 * Class generated from <tt>LinResponseFrame.msg:23</tt> by nedtool.
 * <pre>
 * //
 * // Frame sent by slave nodes to reply to a request
 * //
 * packet LinResponseFrame extends LinRequestFrame
 * {
 *     //The response from a slave actually contains several (up to 8) 
 *     //data bytes plus a checksum. For simplicity, we assume that a 
 *     //slave will simply reply with a random yes/no value
 *     int response;
 * }
 * </pre>
 */
class LinResponseFrame : public ::LinRequestFrame
{
  protected:
    int response_var;

  private:
    void copy(const LinResponseFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const LinResponseFrame&);

  public:
    LinResponseFrame(const char *name=NULL, int kind=0);
    LinResponseFrame(const LinResponseFrame& other);
    virtual ~LinResponseFrame();
    LinResponseFrame& operator=(const LinResponseFrame& other);
    virtual LinResponseFrame *dup() const {return new LinResponseFrame(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getResponse() const;
    virtual void setResponse(int response);
};

inline void doPacking(cCommBuffer *b, LinResponseFrame& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, LinResponseFrame& obj) {obj.parsimUnpack(b);}


#endif // ifndef _LINRESPONSEFRAME_M_H_

